import { expect } from 'chai';
import { waffle, ethers } from "hardhat";
import { Contract } from "ethers";
import { getCreate2Address, solidityKeccak256 } from 'ethers/lib/utils';

import SwapPool from '../artifacts/contracts/SwapPool.sol/SwapPool.json';
describe('Factory', () => {
  const provider = waffle.provider;
  const [wallet, walletTo] = provider.getWallets();
  let token: Contract;
  let factory: Contract;
  let periphery: Contract;
  let weth: Contract;
  // let transferLib: Contract;

  beforeEach(async () => {

    const Factory = await ethers.getContractFactory("Factory");
    factory = await Factory.deploy();
    await factory.deployed();

    const WETH = await ethers.getContractFactory("WETH9");
    weth = await WETH.deploy();
    await weth.deployed();

    const BasicToken = await ethers.getContractFactory("BasicToken");
    token = await BasicToken.deploy(1000);
    await token.deployed();

    // const TransferHelper = await ethers.getContractFactory("TransferHelper");
    // transferLib = await TransferHelper.deploy();
    // await transferLib.deployed();

    // const SwapPool = await ethers.getContractFactory("SwapPool");

    const Periphery = await ethers.getContractFactory("Periphery");
    periphery = await Periphery.deploy(weth.address, factory.address);
    await periphery.deployed();
  });

  it('Create Pool', async () => {
    const testToken = token.address;
    const bytesCode = "0x" + "608060405234801561001057600080fd5b5060405161096d38038061096d8339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b5060608101604052602280825261010b9450909250905061094b60208301398261012560201b6102ba1760201c565b805161011e90600090602084019061025c565b50506102ef565b6102378282604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561016e578181015183820152602001610156565b50505050905090810190601f16801561019b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101ce5781810151838201526020016101b6565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b1790915290955061023b169350505050565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029d57805160ff19168380011785556102ca565b828001600101855582156102ca579182015b828111156102ca5782518255916020019190600101906102af565b506102d69291506102da565b5090565b5b808211156102d657600081556001016102db565b61064d806102fe6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a41368621461003b578063cfae3217146100e3575b600080fd5b6100e16004803603602081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610160945050505050565b005b6100eb610224565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012557818101518382015260200161010d565b50505050905090810190601f1680156101525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61020d6040518060600160405280602381526020016105f5602391396000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102025780601f106101d757610100808354040283529160200191610202565b820191906000526020600020905b8154815290600101906020018083116101e557829003601f168201915b5050505050836103c7565b8051610220906000906020840190610561565b5050565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050905090565b6102208282604051602401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156103035781810151838201526020016102eb565b50505050905090810190601f1680156103305780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561036357818101518382015260200161034b565b50505050905090810190601f1680156103905780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b17905294506105409350505050565b61053b83838360405160240180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156104155781810151838201526020016103fd565b50505050905090810190601f1680156104425780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561047557818101518382015260200161045d565b50505050905090810190601f1680156104a25780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156104d55781810151838201526020016104bd565b50505050905090810190601f1680156105025780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b179052965061054095505050505050565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105a257805160ff19168380011785556105cf565b828001600101855582156105cf579182015b828111156105cf5782518255916020019190600101906105b4565b506105db9291506105df565b5090565b5b808211156105db57600081556001016105e056fe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a2646970667358221220f87981caa12db510b4feb74c10411cc6c1cfb489f653fb3f552ed457ca724ced64736f6c634300060c00334465706c6f79696e67206120477265657465722077697468206772656574696e673a";
    // const bytesCode = SwapPool.deployedBytecode;
    const initCodeHash = solidityKeccak256(["bytes"], [bytesCode]);
    const salt = solidityKeccak256(["address"], [testToken]);

    const create2Address = getCreate2Address(factory.address, salt, initCodeHash)
    await expect(factory.createPool(testToken)).to.emit(factory, 'PoolCreated')
      .withArgs(testToken, create2Address);
  });

  it('getPool', async () => {
    const testToken = token.address;
    const pool = await factory.createPool(testToken);
    const contract = await factory.getPool(testToken);
    // expect(pool).to.equal(await factory.getPool(testToken));
    Promise.resolve(() => expect(pool).not.to.equal(contract));
  });

  // it('Transfer emits event', async () => {
  //   await expect(token.transfer(walletTo.address, 7))
  //     .to.emit(token, 'Transfer')
  //     .withArgs(wallet.address, walletTo.address, 7);
  // });

  // it('Can not transfer above the amount', async () => {
  //   await expect(token.transfer(walletTo.address, 1007)).to.be.reverted;
  // });

  // it('Can not transfer from empty account', async () => {
  //   const tokenFromOtherWallet = token.connect(walletTo);
  //   await expect(tokenFromOtherWallet.transfer(wallet.address, 1))
  //     .to.be.reverted;
  // });

  // it('Calls totalSupply on BasicToken contract', async () => {
  //   await token.totalSupply();
  //   expect('totalSupply').to.be.calledOnContract(token);
  // });

  // it('Calls balanceOf with sender address on BasicToken contract', async () => {
  //   await token.balanceOf(wallet.address);
  //   expect('balanceOf').to.be.calledOnContractWith(token, [wallet.address]);
  // });
});